// vim: ft=scala
/// sigh not sure how to stop sbt from thinking it should compile this - so just making it a scala's' file for now. 
//
import scala.io.Source

// FUTURE: using dispatch
// http://dispatch.databinder.net/Dispatch.html
//


// val makes the properties available as getters.
case class Headers(
  val Host:String,
  val Connection:String ,
  val Accept:String
  )

case class Model(val method:String, 
    val headers: Headers, 
    val client_ip:String,
    val info:String
  )

case class Notebook(
  val name:String
  )

case class NotebookList(
  val value:List[Notebook]

  )
case class Page(
  )
case class PageList(
  val value:List[Page]
  )


// dunno what these format things are. 
implicit val headerFormat = Json.format[Headers]
implicit val modelFormat = Json.format[Model]
implicit val notebookFormat = Json.format[Notebook]
implicit val notebookListFormat = Json.format[NotebookList]

// Use a default http downloader.
def echoResponse = {
  val echoService = "http://scooterlabs.com/echo.json"
  Source.fromURL(echoService) mkString
}

val js = Json.parse(echoResponse)

// .get returns the value, allowing us to do error handling.
//
Json.fromJson[Model](js) get
